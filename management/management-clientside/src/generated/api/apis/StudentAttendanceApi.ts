/* tslint:disable */
/* eslint-disable */
/**
 * Management API
 * Management System API Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ComEducationModelsBulkAttendanceRequest,
  ComEducationModelsCreateStudentAttendanceRequest,
  ComEducationModelsStudentAttendanceDAO,
  ComEducationModelsStudentAttendanceDTO,
  ComEducationModelsUpdateStudentAttendanceRequest,
} from '../models/index';
import {
    ComEducationModelsBulkAttendanceRequestFromJSON,
    ComEducationModelsBulkAttendanceRequestToJSON,
    ComEducationModelsCreateStudentAttendanceRequestFromJSON,
    ComEducationModelsCreateStudentAttendanceRequestToJSON,
    ComEducationModelsStudentAttendanceDAOFromJSON,
    ComEducationModelsStudentAttendanceDAOToJSON,
    ComEducationModelsStudentAttendanceDTOFromJSON,
    ComEducationModelsStudentAttendanceDTOToJSON,
    ComEducationModelsUpdateStudentAttendanceRequestFromJSON,
    ComEducationModelsUpdateStudentAttendanceRequestToJSON,
} from '../models/index';

export interface ApiOrgsOrgIdAttendanceAttendanceIdDeleteRequest {
    orgId: number;
    attendanceId: number;
}

export interface ApiOrgsOrgIdAttendanceAttendanceIdGetRequest {
    orgId: number;
    attendanceId: number;
}

export interface ApiOrgsOrgIdAttendanceAttendanceIdPutRequest {
    orgId: number;
    attendanceId: number;
    comEducationModelsUpdateStudentAttendanceRequest: ComEducationModelsUpdateStudentAttendanceRequest;
}

export interface ApiOrgsOrgIdAttendanceBulkPostRequest {
    orgId: number;
    comEducationModelsBulkAttendanceRequest: ComEducationModelsBulkAttendanceRequest;
}

export interface ApiOrgsOrgIdAttendanceGetRequest {
    orgId: number;
    startDate: string;
    endDate: string;
    classId?: number;
    subjectId?: number;
}

export interface ApiOrgsOrgIdAttendancePostRequest {
    orgId: number;
    comEducationModelsCreateStudentAttendanceRequest: ComEducationModelsCreateStudentAttendanceRequest;
}

/**
 * 
 */
export class StudentAttendanceApi extends runtime.BaseAPI {

    /**
     * Delete an attendance record by ID
     * Delete attendance record
     */
    async apiOrgsOrgIdAttendanceAttendanceIdDeleteRaw(requestParameters: ApiOrgsOrgIdAttendanceAttendanceIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: string; }>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling apiOrgsOrgIdAttendanceAttendanceIdDelete().'
            );
        }

        if (requestParameters['attendanceId'] == null) {
            throw new runtime.RequiredError(
                'attendanceId',
                'Required parameter "attendanceId" was null or undefined when calling apiOrgsOrgIdAttendanceAttendanceIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/orgs/{orgId}/attendance/{attendanceId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"attendanceId"}}`, encodeURIComponent(String(requestParameters['attendanceId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete an attendance record by ID
     * Delete attendance record
     */
    async apiOrgsOrgIdAttendanceAttendanceIdDelete(requestParameters: ApiOrgsOrgIdAttendanceAttendanceIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: string; }> {
        const response = await this.apiOrgsOrgIdAttendanceAttendanceIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a specific attendance record by its ID
     * Get attendance record by ID
     */
    async apiOrgsOrgIdAttendanceAttendanceIdGetRaw(requestParameters: ApiOrgsOrgIdAttendanceAttendanceIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComEducationModelsStudentAttendanceDAO>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling apiOrgsOrgIdAttendanceAttendanceIdGet().'
            );
        }

        if (requestParameters['attendanceId'] == null) {
            throw new runtime.RequiredError(
                'attendanceId',
                'Required parameter "attendanceId" was null or undefined when calling apiOrgsOrgIdAttendanceAttendanceIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/orgs/{orgId}/attendance/{attendanceId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"attendanceId"}}`, encodeURIComponent(String(requestParameters['attendanceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComEducationModelsStudentAttendanceDAOFromJSON(jsonValue));
    }

    /**
     * Retrieve a specific attendance record by its ID
     * Get attendance record by ID
     */
    async apiOrgsOrgIdAttendanceAttendanceIdGet(requestParameters: ApiOrgsOrgIdAttendanceAttendanceIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComEducationModelsStudentAttendanceDAO> {
        const response = await this.apiOrgsOrgIdAttendanceAttendanceIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing attendance record
     * Update attendance record
     */
    async apiOrgsOrgIdAttendanceAttendanceIdPutRaw(requestParameters: ApiOrgsOrgIdAttendanceAttendanceIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: string; }>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling apiOrgsOrgIdAttendanceAttendanceIdPut().'
            );
        }

        if (requestParameters['attendanceId'] == null) {
            throw new runtime.RequiredError(
                'attendanceId',
                'Required parameter "attendanceId" was null or undefined when calling apiOrgsOrgIdAttendanceAttendanceIdPut().'
            );
        }

        if (requestParameters['comEducationModelsUpdateStudentAttendanceRequest'] == null) {
            throw new runtime.RequiredError(
                'comEducationModelsUpdateStudentAttendanceRequest',
                'Required parameter "comEducationModelsUpdateStudentAttendanceRequest" was null or undefined when calling apiOrgsOrgIdAttendanceAttendanceIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/orgs/{orgId}/attendance/{attendanceId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"attendanceId"}}`, encodeURIComponent(String(requestParameters['attendanceId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ComEducationModelsUpdateStudentAttendanceRequestToJSON(requestParameters['comEducationModelsUpdateStudentAttendanceRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Update an existing attendance record
     * Update attendance record
     */
    async apiOrgsOrgIdAttendanceAttendanceIdPut(requestParameters: ApiOrgsOrgIdAttendanceAttendanceIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: string; }> {
        const response = await this.apiOrgsOrgIdAttendanceAttendanceIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create multiple attendance records for a class and subject on a specific date
     * Create bulk attendance records
     */
    async apiOrgsOrgIdAttendanceBulkPostRaw(requestParameters: ApiOrgsOrgIdAttendanceBulkPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: Array<number>; }>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling apiOrgsOrgIdAttendanceBulkPost().'
            );
        }

        if (requestParameters['comEducationModelsBulkAttendanceRequest'] == null) {
            throw new runtime.RequiredError(
                'comEducationModelsBulkAttendanceRequest',
                'Required parameter "comEducationModelsBulkAttendanceRequest" was null or undefined when calling apiOrgsOrgIdAttendanceBulkPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/orgs/{orgId}/attendance/bulk`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ComEducationModelsBulkAttendanceRequestToJSON(requestParameters['comEducationModelsBulkAttendanceRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Create multiple attendance records for a class and subject on a specific date
     * Create bulk attendance records
     */
    async apiOrgsOrgIdAttendanceBulkPost(requestParameters: ApiOrgsOrgIdAttendanceBulkPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: Array<number>; }> {
        const response = await this.apiOrgsOrgIdAttendanceBulkPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve student attendance records filtered by classId, subjectId, and date range (startDate and endDate are required)
     * Get student attendance by filters
     */
    async apiOrgsOrgIdAttendanceGetRaw(requestParameters: ApiOrgsOrgIdAttendanceGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ComEducationModelsStudentAttendanceDTO>>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling apiOrgsOrgIdAttendanceGet().'
            );
        }

        if (requestParameters['startDate'] == null) {
            throw new runtime.RequiredError(
                'startDate',
                'Required parameter "startDate" was null or undefined when calling apiOrgsOrgIdAttendanceGet().'
            );
        }

        if (requestParameters['endDate'] == null) {
            throw new runtime.RequiredError(
                'endDate',
                'Required parameter "endDate" was null or undefined when calling apiOrgsOrgIdAttendanceGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['classId'] != null) {
            queryParameters['classId'] = requestParameters['classId'];
        }

        if (requestParameters['subjectId'] != null) {
            queryParameters['subjectId'] = requestParameters['subjectId'];
        }

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = requestParameters['endDate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/orgs/{orgId}/attendance`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ComEducationModelsStudentAttendanceDTOFromJSON));
    }

    /**
     * Retrieve student attendance records filtered by classId, subjectId, and date range (startDate and endDate are required)
     * Get student attendance by filters
     */
    async apiOrgsOrgIdAttendanceGet(requestParameters: ApiOrgsOrgIdAttendanceGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ComEducationModelsStudentAttendanceDTO>> {
        const response = await this.apiOrgsOrgIdAttendanceGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new student attendance record
     * Create attendance record
     */
    async apiOrgsOrgIdAttendancePostRaw(requestParameters: ApiOrgsOrgIdAttendancePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: number; }>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling apiOrgsOrgIdAttendancePost().'
            );
        }

        if (requestParameters['comEducationModelsCreateStudentAttendanceRequest'] == null) {
            throw new runtime.RequiredError(
                'comEducationModelsCreateStudentAttendanceRequest',
                'Required parameter "comEducationModelsCreateStudentAttendanceRequest" was null or undefined when calling apiOrgsOrgIdAttendancePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/orgs/{orgId}/attendance`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ComEducationModelsCreateStudentAttendanceRequestToJSON(requestParameters['comEducationModelsCreateStudentAttendanceRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Create a new student attendance record
     * Create attendance record
     */
    async apiOrgsOrgIdAttendancePost(requestParameters: ApiOrgsOrgIdAttendancePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: number; }> {
        const response = await this.apiOrgsOrgIdAttendancePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
