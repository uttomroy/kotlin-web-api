/* tslint:disable */
/* eslint-disable */
/**
 * Management API
 * Management System API Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ComEducationModelsCreateShiftRequest,
  ComEducationModelsShiftDAO,
  ComEducationModelsShiftDTO,
  ComEducationModelsUpdateShiftRequest,
} from '../models/index';
import {
    ComEducationModelsCreateShiftRequestFromJSON,
    ComEducationModelsCreateShiftRequestToJSON,
    ComEducationModelsShiftDAOFromJSON,
    ComEducationModelsShiftDAOToJSON,
    ComEducationModelsShiftDTOFromJSON,
    ComEducationModelsShiftDTOToJSON,
    ComEducationModelsUpdateShiftRequestFromJSON,
    ComEducationModelsUpdateShiftRequestToJSON,
} from '../models/index';

export interface CreateShiftRequest {
    orgId: number;
    comEducationModelsCreateShiftRequest: ComEducationModelsCreateShiftRequest;
}

export interface DeleteShiftRequest {
    orgId: number;
    shiftId: number;
}

export interface GetShiftByIdRequest {
    orgId: number;
    shiftId: number;
}

export interface GetShiftsRequest {
    orgId: number;
}

export interface UpdateShiftRequest {
    orgId: number;
    shiftId: number;
    comEducationModelsUpdateShiftRequest: ComEducationModelsUpdateShiftRequest;
}

/**
 * 
 */
export class ShiftApi extends runtime.BaseAPI {

    /**
     * Creates a new shift
     * Create new shift
     */
    async createShiftRaw(requestParameters: CreateShiftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: number; }>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling createShift().'
            );
        }

        if (requestParameters['comEducationModelsCreateShiftRequest'] == null) {
            throw new runtime.RequiredError(
                'comEducationModelsCreateShiftRequest',
                'Required parameter "comEducationModelsCreateShiftRequest" was null or undefined when calling createShift().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/orgs/{orgId}/shifts`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ComEducationModelsCreateShiftRequestToJSON(requestParameters['comEducationModelsCreateShiftRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Creates a new shift
     * Create new shift
     */
    async createShift(requestParameters: CreateShiftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: number; }> {
        const response = await this.createShiftRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes an existing shift
     * Delete shift
     */
    async deleteShiftRaw(requestParameters: DeleteShiftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: string; }>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling deleteShift().'
            );
        }

        if (requestParameters['shiftId'] == null) {
            throw new runtime.RequiredError(
                'shiftId',
                'Required parameter "shiftId" was null or undefined when calling deleteShift().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/orgs/{orgId}/shifts/{shiftId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"shiftId"}}`, encodeURIComponent(String(requestParameters['shiftId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Deletes an existing shift
     * Delete shift
     */
    async deleteShift(requestParameters: DeleteShiftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: string; }> {
        const response = await this.deleteShiftRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a specific shift by its ID
     * Get Shift by ID
     */
    async getShiftByIdRaw(requestParameters: GetShiftByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComEducationModelsShiftDAO>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getShiftById().'
            );
        }

        if (requestParameters['shiftId'] == null) {
            throw new runtime.RequiredError(
                'shiftId',
                'Required parameter "shiftId" was null or undefined when calling getShiftById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/orgs/{orgId}/shifts/{shiftId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"shiftId"}}`, encodeURIComponent(String(requestParameters['shiftId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComEducationModelsShiftDAOFromJSON(jsonValue));
    }

    /**
     * Get a specific shift by its ID
     * Get Shift by ID
     */
    async getShiftById(requestParameters: GetShiftByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComEducationModelsShiftDAO> {
        const response = await this.getShiftByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all shifts in the organization
     * Get Shift list
     */
    async getShiftsRaw(requestParameters: GetShiftsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ComEducationModelsShiftDTO>>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getShifts().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/orgs/{orgId}/shifts`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ComEducationModelsShiftDTOFromJSON));
    }

    /**
     * Get all shifts in the organization
     * Get Shift list
     */
    async getShifts(requestParameters: GetShiftsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ComEducationModelsShiftDTO>> {
        const response = await this.getShiftsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the information of an existing shift
     * Update shift information
     */
    async updateShiftRaw(requestParameters: UpdateShiftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: string; }>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling updateShift().'
            );
        }

        if (requestParameters['shiftId'] == null) {
            throw new runtime.RequiredError(
                'shiftId',
                'Required parameter "shiftId" was null or undefined when calling updateShift().'
            );
        }

        if (requestParameters['comEducationModelsUpdateShiftRequest'] == null) {
            throw new runtime.RequiredError(
                'comEducationModelsUpdateShiftRequest',
                'Required parameter "comEducationModelsUpdateShiftRequest" was null or undefined when calling updateShift().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/orgs/{orgId}/shifts/{shiftId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"shiftId"}}`, encodeURIComponent(String(requestParameters['shiftId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ComEducationModelsUpdateShiftRequestToJSON(requestParameters['comEducationModelsUpdateShiftRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Updates the information of an existing shift
     * Update shift information
     */
    async updateShift(requestParameters: UpdateShiftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: string; }> {
        const response = await this.updateShiftRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
