/* tslint:disable */
/* eslint-disable */
/**
 * Management API
 * Management System API Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ComEducationModelsCreateTeacherRequest,
  ComEducationRoutesPublicErrorResponse,
  ComEducationRoutesPublicLoginRequest,
  ComEducationRoutesPublicLoginResponse,
} from '../models/index';
import {
    ComEducationModelsCreateTeacherRequestFromJSON,
    ComEducationModelsCreateTeacherRequestToJSON,
    ComEducationRoutesPublicErrorResponseFromJSON,
    ComEducationRoutesPublicErrorResponseToJSON,
    ComEducationRoutesPublicLoginRequestFromJSON,
    ComEducationRoutesPublicLoginRequestToJSON,
    ComEducationRoutesPublicLoginResponseFromJSON,
    ComEducationRoutesPublicLoginResponseToJSON,
} from '../models/index';

export interface ApiLoginPostRequest {
    comEducationRoutesPublicLoginRequest: ComEducationRoutesPublicLoginRequest;
}

export interface ApiOrgsOrgIdTeacherPostRequest {
    orgId: number;
    comEducationModelsCreateTeacherRequest: ComEducationModelsCreateTeacherRequest;
}

/**
 * 
 */
export class AuthenticationApi extends runtime.BaseAPI {

    /**
     * Authenticates a user with username and password, returns JWT token on success
     * Authenticate user and get JWT token
     */
    async apiLoginPostRaw(requestParameters: ApiLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['comEducationRoutesPublicLoginRequest'] == null) {
            throw new runtime.RequiredError(
                'comEducationRoutesPublicLoginRequest',
                'Required parameter "comEducationRoutesPublicLoginRequest" was null or undefined when calling apiLoginPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ComEducationRoutesPublicLoginRequestToJSON(requestParameters['comEducationRoutesPublicLoginRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Authenticates a user with username and password, returns JWT token on success
     * Authenticate user and get JWT token
     */
    async apiLoginPost(requestParameters: ApiLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiLoginPostRaw(requestParameters, initOverrides);
    }

    /**
     * Authenticates a user with username and password, returns JWT token on success
     * Create new teacher
     */
    async apiOrgsOrgIdTeacherPostRaw(requestParameters: ApiOrgsOrgIdTeacherPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComEducationRoutesPublicLoginResponse>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling apiOrgsOrgIdTeacherPost().'
            );
        }

        if (requestParameters['comEducationModelsCreateTeacherRequest'] == null) {
            throw new runtime.RequiredError(
                'comEducationModelsCreateTeacherRequest',
                'Required parameter "comEducationModelsCreateTeacherRequest" was null or undefined when calling apiOrgsOrgIdTeacherPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/orgs/{orgId}/teacher`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ComEducationModelsCreateTeacherRequestToJSON(requestParameters['comEducationModelsCreateTeacherRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComEducationRoutesPublicLoginResponseFromJSON(jsonValue));
    }

    /**
     * Authenticates a user with username and password, returns JWT token on success
     * Create new teacher
     */
    async apiOrgsOrgIdTeacherPost(requestParameters: ApiOrgsOrgIdTeacherPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComEducationRoutesPublicLoginResponse> {
        const response = await this.apiOrgsOrgIdTeacherPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
