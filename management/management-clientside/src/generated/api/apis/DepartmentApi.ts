/* tslint:disable */
/* eslint-disable */
/**
 * Management API
 * Management System API Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ComEducationModelsCreateDepartmentRequest,
  ComEducationModelsDepartmentDAO,
  ComEducationModelsDepartmentDTO,
  ComEducationModelsUpdateDepartmentRequest,
} from '../models/index';
import {
    ComEducationModelsCreateDepartmentRequestFromJSON,
    ComEducationModelsCreateDepartmentRequestToJSON,
    ComEducationModelsDepartmentDAOFromJSON,
    ComEducationModelsDepartmentDAOToJSON,
    ComEducationModelsDepartmentDTOFromJSON,
    ComEducationModelsDepartmentDTOToJSON,
    ComEducationModelsUpdateDepartmentRequestFromJSON,
    ComEducationModelsUpdateDepartmentRequestToJSON,
} from '../models/index';

export interface CreateDepartmentRequest {
    orgId: number;
    comEducationModelsCreateDepartmentRequest: ComEducationModelsCreateDepartmentRequest;
}

export interface DeleteDepartmentRequest {
    orgId: number;
    departmentId: number;
}

export interface GetDepartmentByIdRequest {
    orgId: number;
    departmentId: number;
}

export interface GetDepartmentsRequest {
    orgId: number;
}

export interface UpdateDepartmentRequest {
    orgId: number;
    departmentId: number;
    comEducationModelsUpdateDepartmentRequest: ComEducationModelsUpdateDepartmentRequest;
}

/**
 * 
 */
export class DepartmentApi extends runtime.BaseAPI {

    /**
     * Creates a new department
     * Create new department
     */
    async createDepartmentRaw(requestParameters: CreateDepartmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: number; }>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling createDepartment().'
            );
        }

        if (requestParameters['comEducationModelsCreateDepartmentRequest'] == null) {
            throw new runtime.RequiredError(
                'comEducationModelsCreateDepartmentRequest',
                'Required parameter "comEducationModelsCreateDepartmentRequest" was null or undefined when calling createDepartment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/orgs/{orgId}/departments`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ComEducationModelsCreateDepartmentRequestToJSON(requestParameters['comEducationModelsCreateDepartmentRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Creates a new department
     * Create new department
     */
    async createDepartment(requestParameters: CreateDepartmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: number; }> {
        const response = await this.createDepartmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a department by its ID
     * Delete department
     */
    async deleteDepartmentRaw(requestParameters: DeleteDepartmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: string; }>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling deleteDepartment().'
            );
        }

        if (requestParameters['departmentId'] == null) {
            throw new runtime.RequiredError(
                'departmentId',
                'Required parameter "departmentId" was null or undefined when calling deleteDepartment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/orgs/{orgId}/departments/{departmentId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"departmentId"}}`, encodeURIComponent(String(requestParameters['departmentId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Deletes a department by its ID
     * Delete department
     */
    async deleteDepartment(requestParameters: DeleteDepartmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: string; }> {
        const response = await this.deleteDepartmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a specific department by its ID
     * Get Department by ID
     */
    async getDepartmentByIdRaw(requestParameters: GetDepartmentByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComEducationModelsDepartmentDAO>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getDepartmentById().'
            );
        }

        if (requestParameters['departmentId'] == null) {
            throw new runtime.RequiredError(
                'departmentId',
                'Required parameter "departmentId" was null or undefined when calling getDepartmentById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/orgs/{orgId}/departments/{departmentId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"departmentId"}}`, encodeURIComponent(String(requestParameters['departmentId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComEducationModelsDepartmentDAOFromJSON(jsonValue));
    }

    /**
     * Get a specific department by its ID
     * Get Department by ID
     */
    async getDepartmentById(requestParameters: GetDepartmentByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComEducationModelsDepartmentDAO> {
        const response = await this.getDepartmentByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all departments in the organization
     * Get Department list
     */
    async getDepartmentsRaw(requestParameters: GetDepartmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ComEducationModelsDepartmentDTO>>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getDepartments().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/orgs/{orgId}/departments`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ComEducationModelsDepartmentDTOFromJSON));
    }

    /**
     * Get all departments in the organization
     * Get Department list
     */
    async getDepartments(requestParameters: GetDepartmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ComEducationModelsDepartmentDTO>> {
        const response = await this.getDepartmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the information of an existing department
     * Update department information
     */
    async updateDepartmentRaw(requestParameters: UpdateDepartmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComEducationModelsDepartmentDTO>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling updateDepartment().'
            );
        }

        if (requestParameters['departmentId'] == null) {
            throw new runtime.RequiredError(
                'departmentId',
                'Required parameter "departmentId" was null or undefined when calling updateDepartment().'
            );
        }

        if (requestParameters['comEducationModelsUpdateDepartmentRequest'] == null) {
            throw new runtime.RequiredError(
                'comEducationModelsUpdateDepartmentRequest',
                'Required parameter "comEducationModelsUpdateDepartmentRequest" was null or undefined when calling updateDepartment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/orgs/{orgId}/departments/{departmentId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"departmentId"}}`, encodeURIComponent(String(requestParameters['departmentId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ComEducationModelsUpdateDepartmentRequestToJSON(requestParameters['comEducationModelsUpdateDepartmentRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComEducationModelsDepartmentDTOFromJSON(jsonValue));
    }

    /**
     * Updates the information of an existing department
     * Update department information
     */
    async updateDepartment(requestParameters: UpdateDepartmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComEducationModelsDepartmentDTO> {
        const response = await this.updateDepartmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
